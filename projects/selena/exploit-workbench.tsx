import React, { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";

interface Vulnerability {
  severity: 'high' | 'medium' | 'low';
  description: string;
  type: string;
  cwe_id: string;
  mitigation: string;
  cvss_score?: number;
  affected_functions?: string[];
  exploitation_scenario?: string;
  references?: string[];
}

interface Protection {
  name: string;
  status: 'enabled' | 'disabled' | 'unknown';
  canToggle: boolean;
}

interface BinarySection {
  name: string;
  address: string;
  size: string;
  permissions: string;
}

interface BinaryAnalysis {
  architecture: string;
  inputMechanisms: string[];
  protections: Protection[];
  vulnerableFunctions: string[];
  sections: BinarySection[];
}

interface ExploitWorkbenchProps {
  vulnerability: Vulnerability;
  binaryFile?: File | null;
}

interface SandboxConfig {
  aslr: boolean;
  stackProtector: boolean;
  dep: boolean;
  pie: boolean;
}

export function ExploitWorkbench({ vulnerability, binaryFile }: ExploitWorkbenchProps) {
  // Initialize all state at the beginning of the component
  const [activeTab, setActiveTab] = useState("context");
  const [binaryAnalysis, setBinaryAnalysis] = useState<BinaryAnalysis | null>(null);
  const [sandboxConfig, setSandboxConfig] = useState<SandboxConfig>({
    aslr: true,
    stackProtector: true,
    dep: true,
    pie: true
  });
  const [exploitPayload, setExploitPayload] = useState<string>("");
  const [exploitOutput, setExploitOutput] = useState<string>("");
  const [isGeneratingExploit, setIsGeneratingExploit] = useState(false);
  const [isExecuting, setIsExecuting] = useState(false);

  // Handle binary analysis when file is uploaded
  useEffect(() => {
    const analyzeBinary = async () => {
      if (!binaryFile) return;

      const formData = new FormData();
      formData.append('file', binaryFile);
      
      try {
        const response = await fetch('/api/analyze-binary', {
          method: 'POST',
          body: formData,
        });
        
        if (!response.ok) {
          throw new Error('Failed to analyze binary');
        }
        
        const data = await response.json();
        console.log('Binary analysis response:', data);
        
        // Set binary analysis data with default values if fields are missing
        const analysisData = {
          architecture: data.architecture || 'Unknown',
          inputMechanisms: data.inputMechanisms || [],
          protections: data.protections || [
            { name: 'ASLR', status: 'unknown', canToggle: true },
            { name: 'Stack Canary', status: 'unknown', canToggle: true },
            { name: 'DEP/NX', status: 'unknown', canToggle: true },
            { name: 'PIE', status: 'unknown', canToggle: true }
          ],
          vulnerableFunctions: data.vulnerableFunctions || [],
          sections: data.sections || []
        };
        
        setBinaryAnalysis(analysisData);
        
        // Generate initial exploit payload
        if (vulnerability) {
          try {
            const payload = await generateExploit(vulnerability, sandboxConfig);
            setExploitPayload(payload);
          } catch (error) {
            console.error('Failed to generate initial exploit:', error);
          }
        }
      } catch (error) {
        console.error('Binary analysis failed:', error);
      }
    };

    analyzeBinary();
  }, [binaryFile, vulnerability]);

  // Generate exploit function
  const generateExploit = async (
    vulnerability: Vulnerability,
    config: SandboxConfig
  ): Promise<string> => {
    const response = await fetch('/api/generate-exploit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        vulnerability, 
        config,
        vulnerability_type: vulnerability.type,
        cwe_id: vulnerability.cwe_id 
      }),
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: 'Failed to generate exploit' }));
      throw new Error(errorData.message || 'Failed to generate exploit');
    }
    
    const data = await response.text();
    if (!data) {
      throw new Error('No exploit payload generated');
    }
    
    return data;
  };

  // Execute exploit function
  const executeExploit = async (
    payload: string,
    binary: File,
    config: SandboxConfig
  ): Promise<string> => {
    const formData = new FormData();
    formData.append('exploit', payload);
    formData.append('binary', binary);
    formData.append('config', JSON.stringify(config));
    
    const response = await fetch('/api/run-exploit', {
      method: 'POST',
      body: formData,
    });
    
    if (!response.ok) {
      throw new Error('Failed to execute exploit');
    }
    
    return await response.text();
  };

  return (
    <Card className="p-6">
      <div className="space-y-6">
        <div className="flex items-center justify-between border-b pb-4">
          <div>
            <h2 className="text-2xl font-bold">Exploit Workbench</h2>
            <p className="text-muted-foreground">
              Testing: {vulnerability.type}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant={
              vulnerability.severity === 'high' ? 'destructive' :
              vulnerability.severity === 'medium' ? 'default' :
              'secondary'
            }>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            {vulnerability.cvss_score && (
              <Badge variant="outline">
                CVSS: {vulnerability.cvss_score}
              </Badge>
            )}
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="context">Overview</TabsTrigger>
            <TabsTrigger value="analysis">Analysis</TabsTrigger>
            <TabsTrigger value="sandbox">Sandbox</TabsTrigger>
            <TabsTrigger value="exploit">Exploit</TabsTrigger>
            <TabsTrigger value="visualization">Visualization</TabsTrigger>
          </TabsList>

          <TabsContent value="context" className="space-y-4">
            <div className="p-4 rounded-lg bg-muted/50">
              <h3 className="font-semibold mb-2">Vulnerability Context</h3>
              <div className="space-y-3 text-sm">
                <p><strong>Description:</strong> {vulnerability.description}</p>
                <p><strong>CWE:</strong> <a
                  href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe_id.replace('CWE-', '')}.html`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-primary hover:underline"
                >{vulnerability.cwe_id}</a></p>
                {vulnerability.exploitation_scenario && (
                  <div>
                    <strong>Exploitation Scenario:</strong>
                    <div className="mt-1 p-2 bg-background rounded">
                      {vulnerability.exploitation_scenario}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4">
            <div className="p-4 rounded-lg bg-muted/50">
              <h3 className="font-semibold mb-2">Binary Analysis</h3>
              {binaryAnalysis ? (
                <div className="space-y-4">
                  <p><strong>Architecture:</strong> {binaryAnalysis.architecture}</p>
                  <div>
                    <strong>Input Mechanisms:</strong>
                    <div className="mt-1 space-x-2">
                      {binaryAnalysis.inputMechanisms.map((mechanism, idx) => (
                        <Badge key={idx} variant="outline">{mechanism}</Badge>
                      ))}
                    </div>
                  </div>
                  <div>
                    <strong>Vulnerable Functions:</strong>
                    <div className="mt-1 space-x-2">
                      {binaryAnalysis.vulnerableFunctions.map((func, idx) => (
                        <code key={idx} className="px-2 py-1 bg-background rounded text-sm">
                          {func}
                        </code>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <p className="text-muted-foreground">Upload a binary file to see analysis results.</p>
              )}
            </div>
          </TabsContent>

          <TabsContent value="sandbox" className="space-y-4">
            <div className="p-4 rounded-lg bg-muted/50">
              <h3 className="font-semibold mb-4">Sandbox Environment Configuration</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span>ASLR</span>
                  <Button
                    variant={sandboxConfig.aslr ? "default" : "destructive"}
                    onClick={() => setSandboxConfig(prev => ({ ...prev, aslr: !prev.aslr }))}
                  >
                    {sandboxConfig.aslr ? "Enabled" : "Disabled"}
                  </Button>
                </div>
                <div className="flex items-center justify-between">
                  <span>Stack Protector</span>
                  <Button
                    variant={sandboxConfig.stackProtector ? "default" : "destructive"}
                    onClick={() => setSandboxConfig(prev => ({ ...prev, stackProtector: !prev.stackProtector }))}
                  >
                    {sandboxConfig.stackProtector ? "Enabled" : "Disabled"}
                  </Button>
                </div>
                <div className="flex items-center justify-between">
                  <span>DEP/NX</span>
                  <Button
                    variant={sandboxConfig.dep ? "default" : "destructive"}
                    onClick={() => setSandboxConfig(prev => ({ ...prev, dep: !prev.dep }))}
                  >
                    {sandboxConfig.dep ? "Enabled" : "Disabled"}
                  </Button>
                </div>
                <div className="flex items-center justify-between">
                  <span>PIE</span>
                  <Button
                    variant={sandboxConfig.pie ? "default" : "destructive"}
                    onClick={() => setSandboxConfig(prev => ({ ...prev, pie: !prev.pie }))}
                  >
                    {sandboxConfig.pie ? "Enabled" : "Disabled"}
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="exploit" className="space-y-4">
            <div className="p-4 rounded-lg bg-muted/50">
              <h3 className="font-semibold mb-4">Exploit Generation & Testing</h3>
              <div className="space-y-4">
                <Button 
                  className="w-full"
                  disabled={isGeneratingExploit || !binaryFile}
                  onClick={async () => {
                    setIsGeneratingExploit(true);
                    try {
                      const payload = await generateExploit(vulnerability, sandboxConfig);
                      setExploitPayload(payload);
                    } catch (error) {
                      console.error('Failed to generate exploit:', error);
                    } finally {
                      setIsGeneratingExploit(false);
                    }
                  }}
                >
                  {isGeneratingExploit ? "Generating..." : "Generate Exploit"}
                </Button>
                
                {exploitPayload && (
                  <>
                    <div className="bg-background rounded-md p-2">
                      <code className="text-sm whitespace-pre-wrap">{exploitPayload}</code>
                    </div>
                    
                    <Button 
                      className="w-full"
                      disabled={isExecuting || !binaryFile}
                      onClick={async () => {
                        if (!binaryFile) return;
                        setIsExecuting(true);
                        try {
                          const output = await executeExploit(exploitPayload, binaryFile, sandboxConfig);
                          setExploitOutput(output);
                        } catch (error) {
                          console.error('Exploit execution failed:', error);
                          setExploitOutput('Failed to execute exploit: ' + (error as Error).message);
                        } finally {
                          setIsExecuting(false);
                        }
                      }}
                    >
                      {isExecuting ? "Executing..." : "Execute in Sandbox"}
                    </Button>
                  </>
                )}
                
                {exploitOutput && (
                  <div className="bg-background rounded-md p-2 mt-4">
                    <pre className="text-sm whitespace-pre-wrap">{exploitOutput}</pre>
                  </div>
                )}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="visualization" className="space-y-4">
            <div className="p-4 rounded-lg bg-muted/50">
              <h3 className="font-semibold mb-4">Binary Analysis Visualization</h3>
              {binaryAnalysis ? (
                <div className="space-y-6">
                  <div>
                    <h4 className="font-medium mb-2">Memory Layout</h4>
                    <div className="space-y-2">
                      {binaryAnalysis.sections.length > 0 ? (
                        binaryAnalysis.sections.map((section, idx) => (
                          <div key={idx} className="flex items-center gap-4 bg-background p-2 rounded">
                            <span className="font-mono text-sm">{section.address}</span>
                            <div className="flex-1">
                              <div className="h-6 bg-primary/20 rounded relative">
                                <span className="absolute left-2 top-1/2 -translate-y-1/2 text-xs">
                                  {section.name} ({section.permissions})
                                </span>
                              </div>
                            </div>
                            <span className="text-sm text-muted-foreground">{section.size}</span>
                          </div>
                        ))
                      ) : (
                        <div className="text-sm text-muted-foreground p-2">
                          No memory layout information available.
                        </div>
                      )}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Protection Status</h4>
                    <div className="grid grid-cols-2 gap-4">
                      {binaryAnalysis.protections.length > 0 ? (
                        binaryAnalysis.protections.map((protection, idx) => (
                          <div key={idx} className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${
                              protection.status === 'enabled' ? 'bg-green-500' :
                              protection.status === 'disabled' ? 'bg-red-500' :
                              'bg-yellow-500'
                            }`} />
                            <span className="text-sm">{protection.name}</span>
                          </div>
                        ))
                      ) : (
                        <div className="col-span-2 text-sm text-muted-foreground">
                          No protection information available.
                        </div>
                      )}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Vulnerable Functions</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {binaryAnalysis.vulnerableFunctions.length > 0 ? (
                        binaryAnalysis.vulnerableFunctions.map((func, idx) => (
                          <code key={idx} className="text-sm bg-background p-1 rounded">
                            {func}
                          </code>
                        ))
                      ) : (
                        <div className="col-span-2 text-sm text-muted-foreground">
                          No vulnerable functions detected.
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                <p className="text-muted-foreground">
                  Upload a binary file to see visualization details.
                </p>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </Card>
  );
}
